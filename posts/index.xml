<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on üò° code.gripe</title><link>https://code.gripe/posts/</link><description>Recent content in Posts on üò° code.gripe</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Oct 2021 11:27:58 -0500</lastBuildDate><atom:link href="https://code.gripe/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>C# Pattern Matching Ranges</title><link>https://code.gripe/posts/dotnet/csharp-pattern-matching-ranges/</link><pubDate>Thu, 21 Oct 2021 11:27:58 -0500</pubDate><guid>https://code.gripe/posts/dotnet/csharp-pattern-matching-ranges/</guid><description>Pattern matching ranges C# 9.0 introduced new features in pattern matching that allow range expressions (&amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=) in switches.
I examined the impact of using these new range expressions in an existing project.
Original Method My original method was implemented with pattern matching but without range expressions:
private static (int month, int day) MonthDayFromJulian(int daysSinceJan1) =&amp;gt; daysSinceJan1 switch { int x when x &amp;gt;= 0 &amp;amp;&amp;amp; x &amp;lt;= 30 =&amp;gt; (1, daysSinceJan1 + 1), int x when x &amp;gt;= 31 &amp;amp;&amp;amp; x &amp;lt;= 58 =&amp;gt; (2, daysSinceJan1 - 30), int x when x &amp;gt;= 59 &amp;amp;&amp;amp; x &amp;lt;= 89 =&amp;gt; (3, daysSinceJan1 - 58), int x when x &amp;gt;= 90 &amp;amp;&amp;amp; x &amp;lt;= 119 =&amp;gt; (4, daysSinceJan1 - 89), int x when x &amp;gt;= 120 &amp;amp;&amp;amp; x &amp;lt;= 150 =&amp;gt; (5, daysSinceJan1 - 119), int x when x &amp;gt;= 151 &amp;amp;&amp;amp; x &amp;lt;= 180 =&amp;gt; (6, daysSinceJan1 - 150), int x when x &amp;gt;= 181 &amp;amp;&amp;amp; x &amp;lt;= 211 =&amp;gt; (7, daysSinceJan1 - 180), int x when x &amp;gt;= 212 &amp;amp;&amp;amp; x &amp;lt;= 242 =&amp;gt; (8, daysSinceJan1 - 211), int x when x &amp;gt;= 243 &amp;amp;&amp;amp; x &amp;lt;= 272 =&amp;gt; (9, daysSinceJan1 - 242), int x when x &amp;gt;= 273 &amp;amp;&amp;amp; x &amp;lt;= 303 =&amp;gt; (10, daysSinceJan1 - 272), int x when x &amp;gt;= 304 &amp;amp;&amp;amp; x &amp;lt;= 333 =&amp;gt; (11, daysSinceJan1 - 303), int x when x &amp;gt;= 334 &amp;amp;&amp;amp; x &amp;lt;= 364 =&amp;gt; (12, daysSinceJan1 - 333), _ =&amp;gt; throw new ArgumentOutOfRangeException(nameof(daysSinceJan1)) }; It includes some ugly boilerplate to create the temporary int x variable for each case, in order to compare the pattern expression.</description></item><item><title>scorPDX Quickstart</title><link>https://code.gripe/posts/scorpdx-quickstart/</link><pubDate>Tue, 20 Jul 2021 14:18:28 -0500</pubDate><guid>https://code.gripe/posts/scorpdx-quickstart/</guid><description>scorPDX Quickstart scorpdx is a collection of tools and libraries that work with Paradox Interactive games. These are helpful for both Paradox players and developers who create mods and extensions for Paradox games.
Discussion, technical support, and developer chit-chat is available on Discord.
For Players ‚öíÔ∏èironmunge Savescum in ironman, explore multiple timelines, and never lose a savegame again
‚öíÔ∏èironmunge is a general purpose save manager for Paradox Interactive titles. It automatically manages multiple timelines that you can switch between and explore during a campaign.</description></item></channel></rss>